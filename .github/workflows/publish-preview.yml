name: Preview Package Publishing

on:
  pull_request:
    branches: [feat/v3]
    paths:
      - 'packages/**'
    types: [opened, synchronize, reopened]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      packages-changed: ${{ steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'

  publish-preview:
    needs: check-changes
    if: needs.check-changes.outputs.packages-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
      version: ${{ steps.publish.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate preview version
        id: version
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHORT_SHA=$(git rev-parse --short HEAD)
          PREVIEW_VERSION="0.0.0-pr-${PR_NUMBER}-${SHORT_SHA}"
          echo "version=${PREVIEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated preview version: ${PREVIEW_VERSION}"

      - name: Update package versions
        run: |
          # Update all package.json files in packages/ directory
          find packages -name "package.json" -type f | while read file; do
            # Create backup
            cp "$file" "$file.bak"
            
            # Update version using Node.js
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('$file', 'utf8'));
              pkg.version = '${{ steps.version.outputs.version }}';
              fs.writeFileSync('$file', JSON.stringify(pkg, null, 2) + '\n');
            "
            
            echo "Updated version in $file to ${{ steps.version.outputs.version }}"
          done

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish preview packages
        id: publish
        run: |
          # Publish all packages in packages/ directory
          PUBLISHED_PACKAGES=""

          find packages -name "package.json" -type f | while read file; do
            PACKAGE_DIR=$(dirname "$file")
            PACKAGE_NAME=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$file', 'utf8')).name)")
            
            echo "Publishing $PACKAGE_NAME from $PACKAGE_DIR..."
            
            cd "$PACKAGE_DIR"
            
            # Build if build script exists
            if yarn run --list 2>/dev/null | grep -q "build"; then
              echo "Building $PACKAGE_NAME..."
              yarn build
            fi
            
            # Publish with preview tag
            npm publish --tag preview --access public
            
            if [ $? -eq 0 ]; then
              echo "✅ Successfully published $PACKAGE_NAME@${{ steps.version.outputs.version }}"
              PUBLISHED_PACKAGES="$PUBLISHED_PACKAGES $PACKAGE_NAME@${{ steps.version.outputs.version }}"
            else
              echo "❌ Failed to publish $PACKAGE_NAME"
              exit 1
            fi
            
            cd - > /dev/null
          done

          echo "published=true" >> $GITHUB_OUTPUT
          echo "packages=$PUBLISHED_PACKAGES" >> $GITHUB_OUTPUT

      - name: Restore package.json files
        if: always()
        run: |
          # Restore original package.json files
          find packages -name "package.json.bak" -type f | while read backup; do
            original="${backup%.bak}"
            mv "$backup" "$original"
            echo "Restored $original"
          done

      - name: Comment on PR
        if: steps.publish.outputs.published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `🚀 **Preview packages published successfully!**

            **Version:** \`${{ steps.version.outputs.version }}\`
            **Published packages:** ${{ steps.publish.outputs.packages }}

            You can install these preview packages using:
            \`\`\`bash
            npm install <package-name>@${{ steps.version.outputs.version }}
            # or
            yarn add <package-name>@${{ steps.version.outputs.version }}
            \`\`\`

            **Note:** These are preview packages and should only be used for testing.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  trigger-vercel-preview:
    needs: [check-changes, publish-preview]
    if: needs.publish-preview.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Vercel Preview Deployment
        run: |
          curl -X POST "https://api.vercel.com/v1/integrations/deploy/${{ secrets.VERCEL_DEPLOY_HOOK_PREVIEW }}" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "preview-with-packages",
              "source": "github-action",
              "meta": {
                "githubCommitSha": "${{ github.sha }}",
                "githubCommitAuthorName": "${{ github.actor }}",
                "githubCommitMessage": "${{ github.event.pull_request.title }}",
                "packageVersion": "${{ needs.publish-preview.outputs.version }}"
              }
            }'

      - name: Update PR with Vercel deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `🔄 **Vercel preview deployment triggered!**

            The preview deployment has been triggered with the newly published packages.
            Check your Vercel dashboard for deployment status.

            **Package Version:** \`${{ needs.publish-preview.outputs.version }}\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
