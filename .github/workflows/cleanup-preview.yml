name: Cleanup Preview Packages

on:
  pull_request:
    branches: [feat/v3]
    types: [closed]

jobs:
  cleanup-preview-packages:
    runs-on: ubuntu-latest
    # Run cleanup for all closed PRs (both merged and unmerged)
    # This ensures preview packages are cleaned up regardless of merge status
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Cleanup preview packages
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          CLEANUP_COUNT=0

          echo "üßπ Starting cleanup for PR #${PR_NUMBER}"
          echo "============================================="

          # Find all packages in the packages directory
          find packages -name "package.json" -type f | while read file; do
            echo ""
            echo "üì¶ Processing: $file"
            
            # Extract package name safely
            PACKAGE_NAME=$(node -e "
              try {
                const pkg = JSON.parse(require('fs').readFileSync('$file', 'utf8'));
                console.log(pkg.name || '');
              } catch(e) {
                console.log('');
              }
            ")
            
            # Skip if package name is empty, null, or private
            if [ -z "$PACKAGE_NAME" ] || [ "$PACKAGE_NAME" = "null" ]; then
              echo "‚ÑπÔ∏è  Skipping: No package name found in $file"
              continue
            fi
            
            # Check if package is private
            IS_PRIVATE=$(node -e "
              try {
                const pkg = JSON.parse(require('fs').readFileSync('$file', 'utf8'));
                console.log(pkg.private === true ? 'true' : 'false');
              } catch(e) {
                console.log('false');
              }
            ")
            
            if [ "$IS_PRIVATE" = "true" ]; then
              echo "‚ÑπÔ∏è  Skipping: Private package ($PACKAGE_NAME)"
              continue
            fi
            
            echo "üßπ Cleaning up preview versions for: $PACKAGE_NAME"
            
            # Check if package exists on npm registry
            echo "üîç Checking if $PACKAGE_NAME exists on npm registry..."
            if ! npm view "$PACKAGE_NAME" version >/dev/null 2>&1; then
              echo "‚ÑπÔ∏è  Package $PACKAGE_NAME not found on npm registry"
              continue
            fi
            
            echo "‚úÖ Package $PACKAGE_NAME found on npm registry"
            
            # Get current published version for reference
            CURRENT_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null)
            echo "üìå Current published version: $CURRENT_VERSION"
            
            # Get all versions with our PR pattern (including the short SHA)
            # Pattern: pr-{PR_NUMBER}-{SHORT_SHA}
            echo "üîç Searching for versions matching pattern: pr-${PR_NUMBER}-*"
            
            # First, get all versions
            echo "üìã Fetching all versions for $PACKAGE_NAME..."
            ALL_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json 2>/dev/null)
            
            if [ $? -ne 0 ] || [ -z "$ALL_VERSIONS" ] || [ "$ALL_VERSIONS" = "null" ]; then
              echo "‚ÑπÔ∏è  No versions found for $PACKAGE_NAME"
              continue
            fi
            
            # Show total version count for debugging
            VERSION_COUNT=$(echo "$ALL_VERSIONS" | jq '. | length' 2>/dev/null || echo "0")
            echo "üìä Total versions available: $VERSION_COUNT"
            
            # Show recent versions for debugging (last 5)
            echo "üîç Recent versions (for debugging):"
            echo "$ALL_VERSIONS" | jq -r '.[-5:] | .[]' 2>/dev/null | while read version; do
              [ -n "$version" ] && echo "  - $version"
            done
            
            # Filter versions using simplified pattern that catches all PR versions
            PREVIEW_VERSIONS=$(echo "$ALL_VERSIONS" | jq -r ".[]? | select(test(\"pr-${PR_NUMBER}-\"))" 2>/dev/null || echo "")
            
            if [ -n "$PREVIEW_VERSIONS" ]; then
              echo "üì¶ Found preview versions for $PACKAGE_NAME:"
              echo "$PREVIEW_VERSIONS" | while read version; do
                if [ -n "$version" ] && [ "$version" != "null" ]; then
                  echo "  - $version"
                  echo "üóëÔ∏è  Deprecating $PACKAGE_NAME@$version..."
                  
                  if npm deprecate "$PACKAGE_NAME@$version" "Preview package for closed PR #${PR_NUMBER}"; then
                    echo "‚úÖ Successfully deprecated $PACKAGE_NAME@$version"
                    CLEANUP_COUNT=$((CLEANUP_COUNT + 1))
                  else
                    echo "‚ö†Ô∏è  Failed to deprecate $PACKAGE_NAME@$version"
                  fi
                fi
              done
            else
              echo "‚ÑπÔ∏è  No preview versions found for $PACKAGE_NAME"
            fi
          done

          echo ""
          echo "üèÅ Cleanup completed!"
          echo "====================="
          echo "Processed packages in: packages/"

      - name: Comment cleanup status
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `üßπ **Preview package cleanup completed!**

            All preview packages for PR #${{ github.event.pull_request.number }} have been deprecated.

            These packages are no longer recommended for use and will be cleaned up automatically by npm.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
