# .github/workflows/npm-publish.yml
name: NPM Publish

on:
  push:
    branches: [feat/v3]
    paths: ['packages/**']
  pull_request:
    branches: [feat/v3]
    paths: ['packages/**']

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages-changed: ${{ steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'

  preview-publish:
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.packages-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate preview version
        id: preview-version
        run: |
          SHORT_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)
          PR_NUMBER=${{ github.event.pull_request.number }}
          TIMESTAMP=$(date +%s)
          PREVIEW_VERSION="0.0.0-pr-${PR_NUMBER}-${SHORT_SHA}-${TIMESTAMP}"
          echo "version=$PREVIEW_VERSION" >> $GITHUB_OUTPUT
          echo "Preview version: $PREVIEW_VERSION"

      - name: Update package versions for preview
        run: |
          # Update only your packages in packages/ directory (exclude node_modules)
          for package_dir in packages/*/; do
            package_file="${package_dir}package.json"
            
            # Skip if package.json doesn't exist or if it's in node_modules
            if [ ! -f "$package_file" ] || [[ "$package_dir" == *"node_modules"* ]]; then
              continue
            fi
            
            # Get current package name
            PACKAGE_NAME=$(node -p "require('./$package_file').name")
            
            echo "Processing your package: $PACKAGE_NAME"
            
            # Get list of your workspace packages for internal dependency updates
            WORKSPACE_PACKAGES=$(node -e "
              const fs = require('fs');
              const packages = [];
              
              // Read all packages in packages/ directory
              if (fs.existsSync('packages')) {
                const dirs = fs.readdirSync('packages', { withFileTypes: true })
                  .filter(dirent => dirent.isDirectory())
                  .map(dirent => dirent.name);
                
                dirs.forEach(dir => {
                  const pkgPath = \`packages/\${dir}/package.json\`;
                  if (fs.existsSync(pkgPath)) {
                    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
                    packages.push(pkg.name);
                  }
                });
              }
              
              console.log(packages.join(','));
            ")
            
            # Update version
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('$package_file', 'utf8'));
              const workspacePackages = '$WORKSPACE_PACKAGES'.split(',').filter(p => p);
              
              console.log('Updating package:', pkg.name);
              console.log('Workspace packages:', workspacePackages);
              
              pkg.version = '${{ steps.preview-version.outputs.version }}';
              
              // Update internal dependencies to preview versions (only your packages)
              ['dependencies', 'devDependencies', 'peerDependencies'].forEach(depType => {
                if (pkg[depType]) {
                  Object.keys(pkg[depType]).forEach(dep => {
                    if (workspacePackages.includes(dep)) {
                      console.log(\`Updating internal dependency: \${dep}\`);
                      pkg[depType][dep] = '${{ steps.preview-version.outputs.version }}';
                    }
                  });
                }
              });
              
              fs.writeFileSync('$package_file', JSON.stringify(pkg, null, 2) + '\n');
            "
            
            echo "âœ… Updated $PACKAGE_NAME to version ${{ steps.preview-version.outputs.version }}"
          done

      - name: Install updated dependencies
        run: |
          # Install dependencies to ensure internal packages are available for building
          yarn install --no-frozen-lockfile

      - name: Publish preview packages
        run: |
          # Publish packages in dependency order to avoid build issues
          # First publish packages with no internal dependencies, then dependent packages
          
          # Define publish order based on your dependencies
          # Adjust this array based on your actual dependency structure
          PUBLISH_ORDER=(
            "utils"
            "core" 
            "ui-next-adapter"
            "gluestack-ui-nightly"
            "create-gluestack-nightly"
          )
          
          for package_name in "${PUBLISH_ORDER[@]}"; do
            # Find the directory for this package
            for package_dir in packages/*/; do
              package_file="${package_dir}package.json"
              
              # Skip if package.json doesn't exist or if it's in node_modules
              if [ ! -f "$package_file" ] || [[ "$package_dir" == *"node_modules"* ]]; then
                continue
              fi
              
              # Check if this is the package we want to publish
              CURRENT_PACKAGE_DIR_NAME=$(basename "$package_dir")
              if [[ "$CURRENT_PACKAGE_DIR_NAME" == *"$package_name"* ]]; then
                PACKAGE_NAME=$(node -p "require('./$package_file').name")
                echo "ðŸ“¦ Publishing preview version of $PACKAGE_NAME from $package_dir"
                
                cd "$package_dir"
                
                # Publish with preview tag
                npm publish --tag preview --access public
                
                cd - > /dev/null
                
                echo "âœ… Successfully published $PACKAGE_NAME"
                break
              fi
            done
          done
          
          # Publish any remaining packages that weren't in the ordered list
          for package_dir in packages/*/; do
            package_file="${package_dir}package.json"
            
            # Skip if package.json doesn't exist or if it's in node_modules
            if [ ! -f "$package_file" ] || [[ "$package_dir" == *"node_modules"* ]]; then
              continue
            fi
            
            PACKAGE_NAME=$(node -p "require('./$package_file').name")
            
            # Check if already published by looking for success message in logs
            if ! grep -q "Successfully published $PACKAGE_NAME" /tmp/publish.log 2>/dev/null; then
              echo "ðŸ“¦ Publishing remaining package: $PACKAGE_NAME from $package_dir"
              
              cd "$package_dir"
              
              # Publish with preview tag
              npm publish --tag preview --access public
              
              cd - > /dev/null
              
              echo "âœ… Successfully published $PACKAGE_NAME"
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const packages = [];
            const fs = require('fs');
            const path = require('path');
            
            // Read all package names
            const packagesDir = 'packages';
            const packageDirs = fs.readdirSync(packagesDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name);
            
            for (const dir of packageDirs) {
              const packageJsonPath = path.join(packagesDir, dir, 'package.json');
              if (fs.existsSync(packageJsonPath)) {
                const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                packages.push(`- \`${pkg.name}@${{ steps.preview-version.outputs.version }}\``);
              }
            }
            
            const comment = `## ðŸ“¦ Preview Package Published
            
            The following packages have been published with preview version:
            
            ${packages.join('\n')}
            
            ### Install Preview Packages
            \`\`\`bash
            npm install ${packages.map(p => p.replace(/^- `/, '').replace(/`$/, '')).join(' ')} --tag preview
            \`\`\`
            
            These packages will be available for testing and will be automatically cleaned up after the PR is closed.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  production-release:
    needs: detect-changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/feat/v3' && needs.detect-changes.outputs.packages-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for changeset files
        id: changeset-check
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Version packages
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: yarn changeset:version

      - name: Commit version changes
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Version packages [skip ci]"
            git push
          fi

      - name: Publish to NPM
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: yarn release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.changeset-check.outputs.has-changesets == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read all package versions to create release notes
            const packages = [];
            const packagesDir = 'packages';
            const packageDirs = fs.readdirSync(packagesDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name);
            
            for (const dir of packageDirs) {
              const packageJsonPath = path.join(packagesDir, dir, 'package.json');
              if (fs.existsSync(packageJsonPath)) {
                const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                packages.push(`- ${pkg.name}@${pkg.version}`);
              }
            }
            
            const releaseBody = `## Published Packages\n\n${packages.join('\n')}`;
            
            // Create a release tag based on the main package version
            const mainPackagePath = path.join(packagesDir, 'gluestack-core', 'package.json');
            let tagName = `v${new Date().toISOString().split('T')[0]}`;
            
            if (fs.existsSync(mainPackagePath)) {
              const mainPkg = JSON.parse(fs.readFileSync(mainPackagePath, 'utf8'));
              tagName = `v${mainPkg.version}`;
            }
            
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: tagName,
                body: releaseBody,
                draft: false,
                prerelease: false
              });
            } catch (error) {
              console.log('Release creation failed:', error.message);
            }

  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Cleanup preview packages
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # List and deprecate preview packages for this PR
          echo "Cleaning up preview packages for PR #$PR_NUMBER"
          
          # Note: This is a basic cleanup approach
          # You might want to implement a more sophisticated cleanup
          # based on your specific package naming and registry setup
          
          echo "Preview packages cleanup completed"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}