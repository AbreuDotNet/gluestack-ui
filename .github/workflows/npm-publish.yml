# .github/workflows/npm-publish.yml
name: NPM Publish

on:
  push:
    branches: [feat/v3]
    paths: ['packages/**']
  pull_request:
    branches: [feat/v3]
    paths: ['packages/**']

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages-changed: ${{ steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'

  preview-publish:
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.packages-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Debug NPM and generate version
        run: |
          echo "üîë Testing NPM token permissions..."
          echo "Current user: $(npm whoami)"
          
          # Check existing packages
          echo "üì¶ Checking existing packages..."
          PACKAGES=(
            "@gluestack-ui-nightly/utils"
            "@gluestack-ui-nightly/core" 
            "gluestack-ui-nightly"
            "create-gluestack-nightly"
            "@gluestack-nightly/ui-next-adapter"
          )
          
          for package_name in "${PACKAGES[@]}"; do
            if npm view "$package_name" name >/dev/null 2>&1; then
              LATEST_VERSION=$(npm view "$package_name" version 2>/dev/null)
              PREVIEW_VERSION=$(npm view "$package_name@preview" version 2>/dev/null || echo "none")
              echo "‚úÖ $package_name exists (latest: $LATEST_VERSION, preview: $PREVIEW_VERSION)"
            else
              echo "üÜï $package_name - NEW (first time publish)"
            fi
          done
          
          # Generate unique preview version
          SHORT_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)
          PR_NUMBER=${{ github.event.pull_request.number }}
          TIMESTAMP=$(date +%s)
          NANO_TIME=$(date +%N)
          RUN_ID="${{ github.run_id }}"
          UNIQUE_ID=$(echo "${TIMESTAMP}${NANO_TIME}${RUN_ID}$RANDOM" | sha256sum | cut -c1-12)
          PREVIEW_VERSION="0.0.0-pr-${PR_NUMBER}-${SHORT_SHA}-${UNIQUE_ID}"
          
          echo "üì¶ Generated version: $PREVIEW_VERSION"
          echo "PREVIEW_VERSION=$PREVIEW_VERSION" >> $GITHUB_ENV
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update package versions for preview
        run: |
          echo "üîÑ Updating package versions to $PREVIEW_VERSION"
          
          # Update packages/ directory
          for package_dir in packages/*/; do
            package_file="${package_dir}package.json"
            
            if [ ! -f "$package_file" ] || [[ "$package_dir" == *"node_modules"* ]]; then
              continue
            fi
            
            PACKAGE_NAME=$(node -p "require('./$package_file').name")
            echo "Processing: $PACKAGE_NAME"
            
            # Get workspace packages for internal dependency updates
            WORKSPACE_PACKAGES=$(node -e "
              const fs = require('fs');
              const packages = [];
              if (fs.existsSync('packages')) {
                const dirs = fs.readdirSync('packages', { withFileTypes: true })
                  .filter(dirent => dirent.isDirectory())
                  .map(dirent => dirent.name);
                dirs.forEach(dir => {
                  const pkgPath = \`packages/\${dir}/package.json\`;
                  if (fs.existsSync(pkgPath)) {
                    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
                    packages.push(pkg.name);
                  }
                });
              }
              console.log(packages.join(','));
            ")
            
            # Update version and internal dependencies
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('$package_file', 'utf8'));
              const workspacePackages = '$WORKSPACE_PACKAGES'.split(',').filter(p => p);
              
              pkg.version = '$PREVIEW_VERSION';
              
              ['dependencies', 'devDependencies', 'peerDependencies'].forEach(depType => {
                if (pkg[depType]) {
                  Object.keys(pkg[depType]).forEach(dep => {
                    if (workspacePackages.includes(dep)) {
                      pkg[depType][dep] = '$PREVIEW_VERSION';
                    }
                  });
                }
              });
              
              fs.writeFileSync('$package_file', JSON.stringify(pkg, null, 2) + '\n');
            "
            
            echo "‚úÖ Updated $PACKAGE_NAME to version $PREVIEW_VERSION"
          done
          
          # Update apps/ directory to use preview versions
          echo "üîÑ Updating app dependencies to use preview versions..."
          
          # List of apps to update
          APPS=("kitchen-sink" "website" "starter-kit-next" "starter-kit-expo")
          
          for app_name in "${APPS[@]}"; do
            app_package_file="apps/${app_name}/package.json"
            
            if [ ! -f "$app_package_file" ]; then
              echo "‚è≠Ô∏è  Skipping $app_name (package.json not found)"
              continue
            fi
            
            echo "Processing app: $app_name"
            
            # Update app dependencies to use preview versions
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('$app_package_file', 'utf8'));
              let updated = false;
              
              ['dependencies', 'devDependencies'].forEach(depType => {
                if (pkg[depType]) {
                  Object.keys(pkg[depType]).forEach(dep => {
                    if (dep.startsWith('@gluestack-ui-nightly/') || dep.startsWith('@gluestack-nightly/') || dep === 'gluestack-ui-nightly' || dep === 'create-gluestack-nightly') {
                      console.log(\`  Updating \${dep}: \${pkg[depType][dep]} ‚Üí $PREVIEW_VERSION\`);
                      pkg[depType][dep] = '$PREVIEW_VERSION';
                      updated = true;
                    }
                  });
                }
              });
              
              if (updated) {
                fs.writeFileSync('$app_package_file', JSON.stringify(pkg, null, 2) + '\n');
                console.log(\`‚úÖ Updated $app_name dependencies\`);
              } else {
                console.log(\`‚ÑπÔ∏è  No gluestack dependencies found in $app_name\`);
              }
            "
          done
          
          # Verify what was updated
          echo ""
          echo "üîç Verification - Current gluestack dependencies in apps:"
          for app_name in "${APPS[@]}"; do
            app_package_file="apps/${app_name}/package.json"
            if [ -f "$app_package_file" ]; then
              echo "üì± $app_name:"
              node -e "
                const fs = require('fs');
                const pkg = JSON.parse(fs.readFileSync('$app_package_file', 'utf8'));
                ['dependencies', 'devDependencies'].forEach(depType => {
                  if (pkg[depType]) {
                    Object.keys(pkg[depType]).forEach(dep => {
                      if (dep.startsWith('@gluestack-ui-nightly/') || dep.startsWith('@gluestack-nightly/') || dep === 'gluestack-ui-nightly') {
                        console.log(\`  \${dep}: \${pkg[depType][dep]}\`);
                      }
                    });
                  }
                });
              " || echo "  No gluestack dependencies found"
            fi
          done

      - name: Install updated dependencies
        run: yarn install --no-frozen-lockfile

      - name: Wait for NPM registry propagation
        run: |
          echo "‚è≥ Waiting for NPM registry to propagate preview packages..."
          
          # Test packages to verify they're available
          TEST_PACKAGES=(
            "@gluestack-ui-nightly/utils"
            "@gluestack-ui-nightly/core"
          )
          
          MAX_WAIT=300  # 5 minutes max wait
          WAIT_INTERVAL=15  # Check every 15 seconds
          ELAPSED=0
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            ALL_AVAILABLE=true
            
            for pkg in "${TEST_PACKAGES[@]}"; do
              echo "üîç Checking if $pkg@$PREVIEW_VERSION is available..."
              if npm view "$pkg@$PREVIEW_VERSION" version >/dev/null 2>&1; then
                echo "  ‚úÖ $pkg@$PREVIEW_VERSION is available"
              else
                echo "  ‚è≥ $pkg@$PREVIEW_VERSION not yet available"
                ALL_AVAILABLE=false
                break
              fi
            done
            
            if [ "$ALL_AVAILABLE" = true ]; then
              echo "üéâ All preview packages are available in NPM registry!"
              break
            fi
            
            echo "‚è≥ Waiting ${WAIT_INTERVAL}s for registry propagation... (${ELAPSED}s elapsed)"
            sleep $WAIT_INTERVAL
            ELAPSED=$((ELAPSED + WAIT_INTERVAL))
          done
          
          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "‚ö†Ô∏è  Timeout waiting for packages, but continuing..."
          fi
          
          # Additional safety delay
          echo "‚è≥ Additional 30s safety delay for global NPM CDN propagation..."
          sleep 30
          echo "‚úÖ Ready to update app dependencies"

      - name: Commit preview version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all package.json changes
          git add packages/*/package.json apps/*/package.json
          
          if ! git diff --cached --quiet; then
            # Show what's being committed
            echo "üìù Changes being committed:"
            git diff --cached --name-only
            
            # First commit: Update dependencies but skip Vercel deployment
            git commit -m "Update to preview version $PREVIEW_VERSION [vercel-skip]

            Published packages:
            - @gluestack-ui-nightly/utils@$PREVIEW_VERSION
            - @gluestack-ui-nightly/core@$PREVIEW_VERSION
            - @gluestack-nightly/ui-next-adapter@$PREVIEW_VERSION
            - gluestack-ui-nightly@$PREVIEW_VERSION
            - create-gluestack-nightly@$PREVIEW_VERSION
            
            Apps updated to use preview packages.
            Vercel deployment will be triggered separately after packages are ready."
            
            echo "‚è≥ Pushing dependency updates (Vercel will skip this)..."
            git push origin HEAD:${{ github.head_ref }}
            echo "‚úÖ Committed preview version updates to PR branch"
          else
            echo "‚ÑπÔ∏è  No changes to commit"
          fi

      - name: Wait for global NPM propagation
        run: |
          echo "‚è≥ Extended wait for global NPM CDN propagation..."
          echo "This ensures Vercel can install packages from any global region"
          
          # Test packages from multiple NPM mirrors/regions
          TEST_PACKAGES=("@gluestack-ui-nightly/utils" "@gluestack-ui-nightly/core")
          
          echo "üåç Testing package availability across regions..."
          for i in {1..6}; do
            echo "üìç Test round $i/6:"
            ALL_AVAILABLE=true
            
            for pkg in "${TEST_PACKAGES[@]}"; do
              # Test with different registry configs to simulate different regions
              if npm view "$pkg@$PREVIEW_VERSION" version --registry https://registry.npmjs.org/ >/dev/null 2>&1; then
                echo "  ‚úÖ $pkg@$PREVIEW_VERSION available"
              else
                echo "  ‚è≥ $pkg@$PREVIEW_VERSION not yet available"
                ALL_AVAILABLE=false
              fi
            done
            
            if [ "$ALL_AVAILABLE" = true ]; then
              echo "‚úÖ All packages confirmed available globally"
              break
            fi
            
            if [ $i -lt 6 ]; then
              echo "‚è≥ Waiting 45s for further propagation..."
              sleep 45
            fi
          done
          
          # Final comprehensive wait
          echo "‚è≥ Final 60s wait to ensure Vercel global availability..."
          sleep 60
          echo "üéâ Packages should now be available globally for Vercel deployment"

      - name: Trigger Vercel deployment
        run: |
          echo "üöÄ Triggering Vercel deployment now that packages are ready..."
          
          # Create a small documentation update to trigger Vercel
          echo "<!-- Updated: $(date) -->" >> PREVIEW_DEPLOYMENT.md
          echo "# Preview Deployment" >> PREVIEW_DEPLOYMENT.md
          echo "" >> PREVIEW_DEPLOYMENT.md
          echo "Preview packages published:" >> PREVIEW_DEPLOYMENT.md
          echo "- Version: $PREVIEW_VERSION" >> PREVIEW_DEPLOYMENT.md
          echo "- Published at: $(date)" >> PREVIEW_DEPLOYMENT.md
          echo "- Packages ready for deployment" >> PREVIEW_DEPLOYMENT.md
          
          git add PREVIEW_DEPLOYMENT.md
          git commit -m "Trigger Vercel deployment - packages ready

          ‚úÖ All preview packages confirmed available globally
          üöÄ Safe to deploy apps with version $PREVIEW_VERSION
          
          Ready for Vercel deployment!"
          
          echo "üöÄ Pushing deployment trigger..."
          git push origin HEAD:${{ github.head_ref }}
          echo "‚úÖ Vercel deployment triggered with ready packages"

      - name: Publish preview packages
        run: |
          echo "üì¶ Publishing packages in dependency order..."
          echo "" > /tmp/publish.log
          
          # Publish in order: utils -> core -> others
          PUBLISH_ORDER=("utils" "core" "ui-next-adapter" "gluestack-ui-nightly" "create-gluestack-nightly")
          
          for package_name in "${PUBLISH_ORDER[@]}"; do
            for package_dir in packages/*/; do
              package_file="${package_dir}package.json"
              
              if [ ! -f "$package_file" ] || [[ "$package_dir" == *"node_modules"* ]]; then
                continue
              fi
              
              CURRENT_PACKAGE_DIR_NAME=$(basename "$package_dir")
              if [[ "$CURRENT_PACKAGE_DIR_NAME" == *"$package_name"* ]]; then
                PACKAGE_NAME=$(node -p "require('./$package_file').name")
                
                # Check if already published
                if npm view "$PACKAGE_NAME@$PREVIEW_VERSION" version >/dev/null 2>&1; then
                  echo "‚è≠Ô∏è  $PACKAGE_NAME@$PREVIEW_VERSION already exists, skipping..."
                  echo "‚úÖ Skipped $PACKAGE_NAME (already published)" | tee -a /tmp/publish.log
                  break
                fi
                
                echo "üì§ Publishing $PACKAGE_NAME@$PREVIEW_VERSION"
                cd "$package_dir"
                
                if npm publish --tag preview --access public; then
                  echo "‚úÖ Successfully published $PACKAGE_NAME"
                  echo "‚úÖ Successfully published $PACKAGE_NAME" | tee -a /tmp/publish.log
                  echo "$PACKAGE_NAME@$PREVIEW_VERSION" >> /tmp/published-packages.txt
                else
                  echo "‚ùå Failed to publish $PACKAGE_NAME"
                  echo "üîç Checking if published by another process..."
                  if npm view "$PACKAGE_NAME@$PREVIEW_VERSION" version >/dev/null 2>&1; then
                    echo "‚úÖ Package appeared in registry, continuing..."
                    echo "‚úÖ Published by another process $PACKAGE_NAME" | tee -a /tmp/publish.log
                  else
                    echo "üö® Genuine publish failure for $PACKAGE_NAME"
                    echo "üìã Continuing with remaining packages..."
                  fi
                fi
                
                cd - > /dev/null
                break
              fi
            done
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload published packages list
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: published-packages-${{ github.event.pull_request.number }}
          path: /tmp/published-packages.txt
          retention-days: 7

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const packages = [];
            const packagesDir = 'packages';
            
            if (fs.existsSync(packagesDir)) {
              const packageDirs = fs.readdirSync(packagesDir, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory())
                .map(dirent => dirent.name);
              
              for (const dir of packageDirs) {
                const packageJsonPath = path.join(packagesDir, dir, 'package.json');
                if (fs.existsSync(packageJsonPath)) {
                  const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                  packages.push(`- \`${pkg.name}@${process.env.PREVIEW_VERSION}\``);
                }
              }
            }
            
            const comment = `## üì¶ Preview Package Published
            
            The following packages have been published with preview version:
            
            ${packages.join('\n')}
            
            ### Install Preview Packages
            \`\`\`bash
            npm install ${packages.map(p => p.replace(/^- `/, '').replace(/`$/, '')).join(' ')}
            \`\`\`
            
            These packages will be available for testing and will be automatically cleaned up after the PR is closed.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  production-release:
    needs: detect-changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/feat/v3' && needs.detect-changes.outputs.packages-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for changeset files
        id: changeset-check
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Version packages
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: yarn changeset:version

      - name: Commit version changes
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Version packages [skip ci]"
            git push
          fi

      - name: Publish to NPM
        if: steps.changeset-check.outputs.has-changesets == 'true'
        run: yarn release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.changeset-check.outputs.has-changesets == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const packages = [];
            const packagesDir = 'packages';
            const packageDirs = fs.readdirSync(packagesDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name);
            
            for (const dir of packageDirs) {
              const packageJsonPath = path.join(packagesDir, dir, 'package.json');
              if (fs.existsSync(packageJsonPath)) {
                const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                packages.push(`- ${pkg.name}@${pkg.version}`);
              }
            }
            
            const releaseBody = `## Published Packages\n\n${packages.join('\n')}`;
            
            const mainPackagePath = path.join(packagesDir, 'gluestack-core', 'package.json');
            let tagName = `v${new Date().toISOString().split('T')[0]}`;
            
            if (fs.existsSync(mainPackagePath)) {
              const mainPkg = JSON.parse(fs.readFileSync(mainPackagePath, 'utf8'));
              tagName = `v${mainPkg.version}`;
            }
            
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: tagName,
                body: releaseBody,
                draft: false,
                prerelease: false
              });
            } catch (error) {
              console.log('Release creation failed:', error.message);
            }

  cleanup-preview:
    if: always() && github.event_name == 'pull_request' && (github.event.action == 'closed' || failure())
    runs-on: ubuntu-latest
    needs: [preview-publish]
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Download published packages list
        uses: actions/download-artifact@v4
        with:
          name: published-packages-${{ github.event.pull_request.number }}
          path: /tmp/
        continue-on-error: true

      - name: Cleanup preview packages
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Cleaning up preview packages for PR #$PR_NUMBER"
          
          if [ -f "/tmp/published-packages.txt" ]; then
            echo "üìã Using published packages list from artifact"
            while IFS= read -r package_version; do
              if [ -n "$package_version" ]; then
                echo "üóëÔ∏è  Deprecating: $package_version"
                npm deprecate "$package_version" "Preview version for PR #$PR_NUMBER - no longer needed" 2>/dev/null || echo "Failed to deprecate $package_version"
                npm unpublish "$package_version" 2>/dev/null && echo "üóëÔ∏è  Unpublished $package_version" || echo "üì¶ Could not unpublish $package_version"
              fi
            done < /tmp/published-packages.txt
          else
            echo "üìã No published packages list found"
          fi
          
          echo "‚úÖ Cleanup completed for PR #$PR_NUMBER"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true