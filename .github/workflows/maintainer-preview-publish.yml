name: Maintainer Preview Publish

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number to publish preview packages for
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  publish-preview-for-pr:
    name: Publish preview packages for PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch PR ref and checkout
        run: |
          PR_NUMBER=${{ inputs.pr_number }}
          echo "Fetching PR #$PR_NUMBER refs..."
          git fetch origin "+refs/pull/${PR_NUMBER}/merge:refs/remotes/origin/pr/${PR_NUMBER}/merge" 
          if git show-ref --verify --quiet "refs/remotes/origin/pr/${PR_NUMBER}/merge"; then
            git checkout "refs/remotes/origin/pr/${PR_NUMBER}/merge"
            echo "Checked out PR merge ref"
          else
            echo "Merge ref not available; falling back to PR head"
            git fetch origin "+refs/pull/${PR_NUMBER}/head:refs/remotes/origin/pr/${PR_NUMBER}/head"
            git checkout "refs/remotes/origin/pr/${PR_NUMBER}/head"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
          always-auth: true

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Verify NPM token availability
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "::error::NPM_TOKEN is not set. Maintainer action requires NPM_TOKEN secret."
            exit 1
          fi

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
          npm config set registry "https://registry.npmjs.org"
          npm whoami | cat

      - name: Generate preview version
        id: version
        run: |
          PR_NUMBER=${{ inputs.pr_number }}
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          PREVIEW_VERSION="0.0.0-pr-${PR_NUMBER}-${SHORT_SHA}-${TIMESTAMP}"
          echo "version=${PREVIEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${PREVIEW_VERSION}"

      - name: Detect changed packages
        id: detect
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_BRANCH=$(gh pr view ${{ inputs.pr_number }} --json baseRefName -q .baseRefName || echo "main")
          echo "Base branch: $BASE_BRANCH"
          git fetch origin $BASE_BRANCH
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD)
          echo "$CHANGED_FILES" | cat

          CHANGED_PACKAGES=""
          for package_dir in packages/*/; do
            [ -f "${package_dir}package.json" ] || continue
            if echo "$CHANGED_FILES" | grep -q "^${package_dir}"; then
              PACKAGE_NAME=$(node -e "try{console.log(JSON.parse(require('fs').readFileSync('${package_dir}package.json')).name||'')}catch(e){console.log('')}")
              if [ -n "$PACKAGE_NAME" ]; then
                if [ -n "$CHANGED_PACKAGES" ]; then
                  CHANGED_PACKAGES="$CHANGED_PACKAGES $PACKAGE_NAME"
                else
                  CHANGED_PACKAGES="$PACKAGE_NAME"
                fi
              fi
            fi
          done

          echo "changed-packages=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "Changed packages: $CHANGED_PACKAGES"

      - name: Update package versions (changed only)
        if: steps.detect.outputs.changed-packages != ''
        run: |
          CHANGED_PACKAGES="${{ steps.detect.outputs.changed-packages }}"
          for package_dir in packages/*/; do
            [ -f "${package_dir}package.json" ] || continue
            PACKAGE_NAME=$(node -e "try{console.log(JSON.parse(require('fs').readFileSync('${package_dir}package.json')).name||'')}catch(e){console.log('')}")
            if echo "$CHANGED_PACKAGES" | grep -q "$PACKAGE_NAME"; then
              package_file="${package_dir}package.json"
              cp "$package_file" "$package_file.bak"
              node -e "const fs=require('fs');const f='$package_file';const pkg=JSON.parse(fs.readFileSync(f,'utf8'));pkg.version='${{ steps.version.outputs.version }}';fs.writeFileSync(f,JSON.stringify(pkg,null,2)+'\n')"
              echo "Updated $PACKAGE_NAME to ${{ steps.version.outputs.version }}"
            fi
          done

      - name: Update internal package references (changed only)
        if: steps.detect.outputs.changed-packages != ''
        run: |
          CHANGED_PACKAGES="${{ steps.detect.outputs.changed-packages }}"
          for package_dir in packages/*/; do
            [ -f "${package_dir}package.json" ] || continue
            PACKAGE_NAME=$(node -e "try{console.log(JSON.parse(require('fs').readFileSync('${package_dir}package.json')).name||'')}catch(e){console.log('')}")
            if echo "$CHANGED_PACKAGES" | grep -q "$PACKAGE_NAME"; then
              package_file="${package_dir}package.json"
              node -e "const fs=require('fs');const f='$package_file';const pkg=JSON.parse(fs.readFileSync(f,'utf8'));const ver='${{ steps.version.outputs.version }}';const changed='$CHANGED_PACKAGES'.split(' ').filter(Boolean);['dependencies','devDependencies','peerDependencies'].forEach(k=>{if(pkg[k]){Object.keys(pkg[k]).forEach(dep=>{if(dep.startsWith('@gluestack-ui/')&&changed.includes(dep)){pkg[k][dep]=ver;}})}});fs.writeFileSync(f,JSON.stringify(pkg,null,2)+'\n')"
              echo "Updated internal deps in $PACKAGE_NAME"
            fi
          done

      - name: Publish changed packages
        id: publish
        if: steps.detect.outputs.changed-packages != ''
        run: |
          set -e
          CHANGED_PACKAGES="${{ steps.detect.outputs.changed-packages }}"
          PUBLISHED=""
          for dir in packages/*/; do
            [ -f "${dir}package.json" ] || continue
            NAME=$(node -e "try{console.log(JSON.parse(require('fs').readFileSync('${dir}package.json')).name||'')}catch(e){console.log('')}")
            PRIVATE=$(node -e "try{const p=JSON.parse(require('fs').readFileSync('${dir}package.json'));console.log(p.private===true?'true':'false')}catch(e){console.log('false')}")
            if echo "$CHANGED_PACKAGES" | grep -q "$NAME" && [ "$PRIVATE" != "true" ]; then
              echo "Publishing $NAME"
              (cd "$dir" && npm cache clean --force && rm -rf node_modules package-lock.json yarn.lock && npm publish --tag preview --access public)
              PUBLISHED="$PUBLISHED $NAME@${{ steps.version.outputs.version }}"
              sleep 5
            fi
          done
          echo "packages=$PUBLISHED" >> $GITHUB_OUTPUT
          echo "Published: $PUBLISHED"

      - name: Restore package.json files
        if: always()
        run: |
          for package_dir in packages/*/; do
            if [ -f "${package_dir}package.json.bak" ]; then
              mv "${package_dir}package.json.bak" "${package_dir}package.json"
              echo "Restored ${package_dir}package.json"
            fi
          done

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number(`${{ inputs.pr_number }}`);
            const version = `${{ steps.version.outputs.version }}`;
            const published = `${{ steps.publish.outputs.packages }}`.trim();
            const success = Boolean(published);
            const body = success
              ? `## üöÄ Preview packages published by maintainer\n\n**Version:** \`${version}\`\n\n**Published packages:**\n${published.split(' ').filter(Boolean).map(p=>`- \`${p}\``).join('\n')}`
              : `## ‚ùå Maintainer preview publish failed\n\nCheck the workflow logs for details.`;
            github.rest.issues.createComment({
              issue_number: pr,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
